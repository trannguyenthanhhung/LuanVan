{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","input","data","isShown","content","token","change","e","_this","setState","target","value","submit","preventDefault","fetch","concat","then","res","json","catch","err","console","log","showContent","newdata","_this2","this","_this$state","reg","join","replace","react_default","a","createElement","Fragment","className","data-shadow","style","marginTop","onSubmit","SearchInput","onChange","height","placeholder","fontSize","boxShadow","width","position","top","right","length","Pane","borderRadius","margin","backgroundColor","Table","Body","map","item","i","Row","key","isSelectable","onSelect","file","Cell","Icon","icon","color","marginRight","TextCell","isNumber","cosine","toFixed","SideSheet","onCloseComplete","containerProps","display","flex","flexDirection","zIndex","flexShrink","elevation","padding","Heading","size","overflowY","background","Card","alignItems","justifyContent","Paragraph","whiteSpace","highlighter_default","search","RegExp","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bffee3d0.chunk.js","sourcesContent":["import React, { Component } from 'react'\n// import logo from './logo.svg'\nimport './App.css'\nimport {\n  SearchInput,\n  Pane,\n  Table,\n  Icon,\n  SideSheet,\n  Paragraph,\n  Heading,\n  Card\n} from 'evergreen-ui'\nimport Highlight from 'react-highlighter'\n\nclass App extends Component {\n  state = {\n    input: '',\n    data: [],\n    isShown: false,\n    content: {},\n    token: []\n  }\n\n  change = e => {\n    this.setState({\n      input: e.target.value\n    })\n  }\n\n  submit = e => {\n    e.preventDefault()\n    const { input } = this.state\n    fetch(`http://localhost:5500/?query=${input}`)\n      .then(res => res.json())\n      .then(data => {\n        this.setState({\n          data: data.data,\n          token: data.token\n        })\n      })\n      .catch(err => console.log(err))\n  }\n  showContent = value => {\n    fetch(`http://localhost:5500/content?file=${value}`)\n      .then(res => res.json())\n      .then(data => {\n        const newdata = data.data\n        const content = {\n          value,\n          data: newdata\n        }\n        this.setState({\n          content,\n          isShown: true\n        })\n      })\n      .catch(err => console.log(err))\n  }\n  render() {\n    const { input, data, isShown, content, token } = this.state\n    const reg = token && token.join('|').replace(/['\"]+/g, '/')\n    return (\n      <React.Fragment>\n        <div className=\"App\">\n          <h1 data-shadow=\"Mr.Lazy\">Mr.Lazy</h1>\n          <div style={{ marginTop: 25 }}>\n            <form onSubmit={this.submit}>\n              <SearchInput\n                onChange={this.change}\n                value={input}\n                height={55}\n                placeholder=\"Nhập từ tìm kiếm...\"\n                style={{\n                  fontSize: 16,\n                  boxShadow:\n                    '0 2px 2px 0 rgba(0, 0, 0, 0.16), 0 0 0 1px rgba(0, 0, 0, 0.08)'\n                }}\n                width=\"100%\"\n              />\n            </form>\n            <span\n              style={{\n                position: 'absolute',\n                top: 15,\n                right: 20\n              }}\n            >\n              Có {data.length} kết quả\n            </span>\n          </div>\n          <Pane\n            style={{\n              borderRadius: 2,\n              margin: '25px 0',\n              backgroundColor: '#ffffff',\n              boxShadow:\n                '0 2px 2px 0 rgba(0,0,0,0.16), 0 0 0 1px rgba(0,0,0,0.08)'\n            }}\n          >\n            <Table.Body height={240}>\n              {data.map((item, i) => (\n                <Table.Row\n                  key={i}\n                  isSelectable\n                  onSelect={() => this.showContent(item.file)}\n                  // intent={intent}\n                >\n                  <Table.Cell>\n                    <Icon icon=\"sim-card\" color=\"success\" marginRight={10} />\n                    {item.file}\n                  </Table.Cell>\n                  <Table.TextCell isNumber>\n                    {item.cosine.toFixed(2)}\n                  </Table.TextCell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Pane>\n        </div>\n\n        {content && (\n          <SideSheet\n            isShown={isShown}\n            onCloseComplete={() => this.setState({ isShown: false })}\n            containerProps={{\n              display: 'flex',\n              flex: '1',\n              flexDirection: 'column'\n            }}\n          >\n            <Pane\n              zIndex={1}\n              flexShrink={0}\n              elevation={0}\n              backgroundColor=\"white\"\n            >\n              <Pane padding={16}>\n                <Heading size={600}>{content.value}</Heading>\n              </Pane>\n            </Pane>\n            <Pane flex=\"1\" overflowY=\"scroll\" background=\"tint1\" padding={16}>\n              <Card\n                backgroundColor=\"white\"\n                elevation={0}\n                display=\"flex\"\n                alignItems=\"center\"\n                justifyContent=\"center\"\n              >\n                <Paragraph style={{ whiteSpace: 'pre-line', padding: 20 }}>\n                  <Highlight search={new RegExp(reg)}>{content.data}</Highlight>\n                </Paragraph>\n              </Card>\n            </Pane>\n          </SideSheet>\n        )}\n      </React.Fragment>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}