{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","input","data","isShown","content","token","loading","change","e","_this","setState","target","value","submit","preventDefault","fetch","concat","then","res","json","catch","err","console","log","showContent","newdata","reg","_this2","this","_this$state","join","replace","react_default","a","createElement","Fragment","className","data-shadow","style","marginTop","onSubmit","SearchInput","onChange","height","placeholder","fontSize","boxShadow","width","position","top","right","length","Pane","borderRadius","margin","backgroundColor","Table","Body","display","alignItems","justifyContent","Spinner","map","item","i","Row","key","isSelectable","onSelect","file","Cell","Icon","icon","color","marginRight","TextCell","isNumber","cosine","toFixed","SideSheet","onCloseComplete","containerProps","flex","flexDirection","zIndex","flexShrink","elevation","padding","Heading","size","overflowY","background","Card","Paragraph","whiteSpace","highlighter_default","search","RegExp","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0ae5dc6a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n// import logo from './logo.svg'\r\nimport \"./App.css\";\r\nimport {\r\n  SearchInput,\r\n  Pane,\r\n  Table,\r\n  Icon,\r\n  SideSheet,\r\n  Paragraph,\r\n  Heading,\r\n  Card,\r\n  Spinner\r\n} from \"evergreen-ui\";\r\nimport Highlight from \"react-highlighter\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    input: \"\",\r\n    data: [],\r\n    isShown: false,\r\n    content: {},\r\n    token: [],\r\n    loading: false\r\n  };\r\n\r\n  change = e => {\r\n    this.setState({\r\n      input: e.target.value\r\n    });\r\n  };\r\n\r\n  submit = e => {\r\n    e.preventDefault();\r\n    this.setState({\r\n      loading: true\r\n    });\r\n    const { input } = this.state;\r\n    fetch(`http://localhost:5500/?query=${input}`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.setState({\r\n          data: data.data,\r\n          token: data.token,\r\n          loading: false\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n  showContent = value => {\r\n    fetch(`http://localhost:5500/content?file=${value}`)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        const newdata = data.data;\r\n        const content = {\r\n          value,\r\n          data: newdata\r\n        };\r\n        this.setState({\r\n          content,\r\n          isShown: true\r\n        });\r\n      })\r\n      .catch(err => console.log(err));\r\n  };\r\n  render() {\r\n    const { input, data, isShown, content, token, loading } = this.state;\r\n    let reg;\r\n    if (token) {\r\n      reg = token.join(\"|\").replace(/['\"]+/g, \"/\");\r\n    } else {\r\n      reg = \"\";\r\n    }\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"App\">\r\n          <h1 data-shadow=\"Search\">Search</h1>\r\n          <div style={{ marginTop: 25 }}>\r\n            <form onSubmit={this.submit}>\r\n              <SearchInput\r\n                onChange={this.change}\r\n                value={input}\r\n                height={55}\r\n                placeholder=\"Nhập từ tìm kiếm...\"\r\n                style={{\r\n                  fontSize: 16,\r\n                  boxShadow:\r\n                    \"0 2px 2px 0 rgba(0, 0, 0, 0.16), 0 0 0 1px rgba(0, 0, 0, 0.08)\"\r\n                }}\r\n                width=\"100%\"\r\n              />\r\n            </form>\r\n            <span\r\n              style={{\r\n                position: \"absolute\",\r\n                top: 15,\r\n                right: 20\r\n              }}\r\n            >\r\n              Có {data.length} kết quả\r\n            </span>\r\n          </div>\r\n          <Pane\r\n            style={{\r\n              borderRadius: 2,\r\n              margin: \"25px 0\",\r\n              backgroundColor: \"#ffffff\",\r\n              boxShadow:\r\n                \"0 2px 2px 0 rgba(0,0,0,0.16), 0 0 0 1px rgba(0,0,0,0.08)\"\r\n            }}\r\n          >\r\n            <Table.Body height={240}>\r\n              {loading && (\r\n                <Pane\r\n                  display=\"flex\"\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"center\"\r\n                  height={240}\r\n                >\r\n                  <Spinner />\r\n                </Pane>\r\n              )}\r\n              {data.map((item, i) => (\r\n                <Table.Row\r\n                  key={i}\r\n                  isSelectable\r\n                  onSelect={() => this.showContent(item.file)}\r\n                  // intent={intent}\r\n                >\r\n                  <Table.Cell>\r\n                    <Icon icon=\"sim-card\" color=\"success\" marginRight={10} />\r\n                    {item.file}\r\n                  </Table.Cell>\r\n                  <Table.TextCell isNumber>\r\n                    {item.cosine.toFixed(2)}\r\n                  </Table.TextCell>\r\n                </Table.Row>\r\n              ))}\r\n            </Table.Body>\r\n          </Pane>\r\n        </div>\r\n\r\n        {content && (\r\n          <SideSheet\r\n            isShown={isShown}\r\n            onCloseComplete={() => this.setState({ isShown: false })}\r\n            containerProps={{\r\n              display: \"flex\",\r\n              flex: \"1\",\r\n              flexDirection: \"column\"\r\n            }}\r\n          >\r\n            <Pane\r\n              zIndex={1}\r\n              flexShrink={0}\r\n              elevation={0}\r\n              backgroundColor=\"white\"\r\n            >\r\n              <Pane padding={16}>\r\n                <Heading size={600}>{content.value}</Heading>\r\n              </Pane>\r\n            </Pane>\r\n            <Pane flex=\"1\" overflowY=\"scroll\" background=\"tint1\" padding={16}>\r\n              <Card\r\n                backgroundColor=\"white\"\r\n                elevation={0}\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n              >\r\n                <Paragraph style={{ whiteSpace: \"pre-line\", padding: 20 }}>\r\n                  <Highlight search={new RegExp(reg)}>{content.data}</Highlight>\r\n                </Paragraph>\r\n              </Card>\r\n            </Pane>\r\n          </SideSheet>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}